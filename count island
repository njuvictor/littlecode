class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        if(m == 0) return 0;
        int n = grid[0].size();
        int count = 0;
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] == '0') continue;
                helper(grid, i, j);
                ++count;
            }
        }
        return count;
    }
    
    void helper(vector<vector<char>>& grid, int i, int j){
        grid[i][j] = '0';
        if(j + 1 < grid[0].size() && grid[i][j + 1] == '1') helper(grid, i, j + 1);
        if(i + 1 < grid.size() && grid[i + 1][j] == '1') helper(grid, i + 1, j);
        if(j - 1 >= 0 && grid[i][j - 1] == '1') helper(grid, i, j - 1);
        if(i - 1 >= 0 && grid[i - 1][j] == '1') helper(grid, i - 1, j);
    }
};