class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> myMap;
        for(int i = 0; i < inorder.size(); ++i)
            myMap[inorder[i]] = i;
        return helper(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1, myMap);
    }
    
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder, int is, int ie, int ps, int pe, unordered_map<int, int>& myMap) {
        if(is > ie || ps > pe) return nullptr;
        int i = myMap[postorder[pe]];
        TreeNode *root = new TreeNode(postorder[pe]);
        root->left = helper(inorder, postorder, is, i - 1, ps, ps + i - 1 - is, myMap);
        root->right = helper(inorder, postorder, i + 1, ie, ps + i - is, pe - 1, myMap);
    }
};