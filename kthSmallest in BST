class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int count = 0;
        TreeNode* parrent;
        TreeNode* curr = root;
        stack<TreeNode*> sta;
        while(!sta.empty() || curr){
            
            if(curr){
                sta.push(curr);
                curr = curr->left;
            }
            else{
                parrent = sta.top();
                sta.pop();
                ++count;
                if(count == k) {
                    return parrent->val;
                }
                curr = parrent->right;
            }
        }
    }
};


class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        if(!root) return 0;
        count.push_back(0);
        helper(root, k);
        return count[1];
    }
    void helper(TreeNode* root, int k){
        if(!root) return;
        helper(root->left, k);
        
        if(root->left == nullptr && count[0] == 0){
            count[0] = 1;
        }
        else{
            count[0] = count[0] + 1;
        }
        if(count[0] == k){
            count.push_back(root->val);
        return;
        }
    
        helper(root->right, k);
    }
private:
    vector<int> count;
};